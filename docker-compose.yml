services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: liquidator
      POSTGRES_PASSWORD: liquidator
      POSTGRES_DB: liquidator
    ports: ["5432:5432"]
  redis:
    image: redis:7-alpine
    command: ["redis-server", "--port", "6380"]
    ports:
      - "6380:6380"
    restart: unless-stopped
  worker:
    build:
      context: .
      dockerfile: ./ops/Dockerfile
    env_file:
      - .env
    environment:
      # Ensure metrics server binds to exposed port
      PROM_PORT: "9464"
      # Wire to in-cluster risk-engine container
      RISK_ENGINE_URL: "http://risk-engine:4010"
      DATABASE_URL: postgresql://liquidator:liquidator@db:5432/liquidator?sslmode=disable
      REDIS_URL: "redis://redis:6380"
    command: ["/app/entrypoint.sh"]
    depends_on: [db, redis]
    ports:
      - "9464:9464"
    volumes:
      - ./.env:/app/.env:ro
      - ./logs:/app/logs
    healthcheck:
      test: [
        "CMD-SHELL",
        "node -e \"require('http').get('http://localhost:9464/ready', r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))\""
      ]
      interval: 10s
      timeout: 3s
      retries: 6
    restart: unless-stopped

  risk-engine:
    build:
      context: .
      dockerfile: ./ops/Dockerfile
    env_file:
      - .env
    environment:
      # Fastify API port
      RISK_ENGINE_PORT: "4010"
      # Metrics server port for Prometheus
      PROM_PORT: "9465"
    command: ["node","/app/dist/offchain/risk_engine/server.js"]
    volumes:
      - ./.env:/app/.env:ro
    healthcheck:
      test: [
        "CMD-SHELL",
        "node -e \"require('http').get('http://localhost:4010/health', r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))\""
      ]
      interval: 10s
      timeout: 3s
      retries: 6
    # Expose only within the docker network; no host port bindings
    restart: unless-stopped

  postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:v0.15.0
    environment:
      DATA_SOURCE_NAME: postgresql://liquidator:liquidator@db:5432/liquidator?sslmode=disable
      PG_EXPORTER_EXTEND_QUERY_PATH: /etc/postgres_exporter/queries.yaml
    volumes:
      - ./monitoring/postgres_exporter_queries.yaml:/etc/postgres_exporter/queries.yaml:ro
    depends_on: [db]
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.52.0
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus_rules.yml:/etc/prometheus/rules/founder.yml:ro
    command: ["--config.file=/etc/prometheus/prometheus.yml"]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "9090:9090"
    depends_on: [worker, postgres-exporter, alertmanager]
    restart: unless-stopped

  alertmanager:
    image: prom/alertmanager:v0.27.0
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    environment:
      SLACK_ALERT_WEBHOOK: ${SLACK_ALERT_WEBHOOK}
    ports:
      - "9093:9093"
    restart: unless-stopped

  loki:
    image: grafana/loki:2.9.8
    command: ["-config.file=/etc/loki/local-config.yaml"]
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    ports:
      - "3100:3100"
    restart: unless-stopped

  promtail:
    image: grafana/promtail:2.9.8
    command: ["-config.file=/etc/promtail/config.yml"]
    depends_on: [loki]
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/log:/var/log:ro
      - ./logs:/logs:ro
    restart: unless-stopped

  grafana:
    image: grafana/grafana:11.1.0
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: "uBBybxx3s@Bn7M"
      GF_USERS_DEFAULT_THEME: dark
      GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH: /var/lib/grafana/dashboards/founder.json
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3000:3000"
    depends_on: [prometheus, loki]
    restart: unless-stopped

volumes:
  loki-data:
  grafana-data:
